<snippet>
	<content><![CDATA[
/******************************************
* AUTHOR : AMAN SAXENA *
* "There's some good in this world, and it's worth fighting for." *
* INSTITUTION : KIET Group of Institutions *
******************************************/
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 

const long long MODULO=1000000007;
#define FOR(i,a,n) for(int i=a;i<n;i++)
#define FOR1(i,a,n) for(int i=a;i<=n;i++)
#define FOR2(i,a,n) for(int i=a;i>=n;i--)
#define pb push_back
#define mp make_pair
#define ll long long 
#define ull unsigned long long
#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))

using namespace std;
using namespace __gnu_pbds;

/*typedef tree< int, null_type,less<pair<int, int>>,rb_tree_tag, 
tree_order_statistics_node_update> ordered_set;*/   // for integer type entry in ordered set

typedef tree< pair<int, int>, null_type,less<pair<int, int>>,rb_tree_tag,
tree_order_statistics_node_update> ordered_set;     // for pair type entry in ordered set

ordered_set s;

/*PBDS: Policy based data structures.

Features:
-> find_by_order(k): It returns to an iterator to the kth element (counting from zero) in the set in O(logn) time.
-> order_of_key(k) : It returns to the number of items that are strictly smaller than our item k in O(logn) time.
-> s.order_of_key(r+1) â€“ s.order_of_key(l) : count of elements between l and r can be found.*/

template <typename TYPE> void in(TYPE &x){cin>>x;}

const int N=2002;
int b[N],a[N];

void solve()
{
    
}

void test()
{
    int t;
    cin>>t;
    while(t--) //for(int j=1;j<=t;j++) cout << "Case #" << j << ": ";
    {
        solve();
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    test();
    // solve();
    
    return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>pbds</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
